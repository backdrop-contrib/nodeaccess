<?php

/**
 * @file
 * Install/uninstall functions for Nodeaccess.
 */

/**
 * Implements hook_schema().
 */
function nodeaccess_schema() {
  $schema['nodeaccess'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'gid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'realm' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'grant_view'  => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'grant_update' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'grant_delete' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'gid', 'realm'),
  );
  return $schema;
}

/**
 * Implements hook_disable().
 */
function nodeaccess_disable() {
  nodeaccess_disabling(TRUE);
}

/**
 * Implements hook_install().
 */
function nodeaccess_install() {
  $config = config('nodeaccess.settings');
  $roles = user_roles(FALSE, NULL, TRUE);

  // Set up default permissions to be view for authenticated and
  // anonymous users, and all permissions for author.
  $grants = array();
  $role_perms = user_role_permissions(array(1 => 1, 2 => 2));
  $role_perms[1]['access content'] = isset($role_perms[1]['access content'])?
                                      intval($role_perms[1]['access content']) : 0;
  $role_perms[2]['access content'] = isset($role_perms[2]['access content'])?
                                      intval($role_perms[2]['access content']) : 0;
  // Anonymous user setting.
  $grants[] = array(
    'gid' => 1,
    'realm' => 'nodeaccess_rid',
    'grant_view' => $role_perms[1]['access content'],
  );
  // Authenticated user setting.
  $grants[] = array(
    'gid' => 2,
    'realm' => 'nodeaccess_rid',
    'grant_view' => $role_perms[2]['access content'],
  );
  $author_prefs = array();
  $node_types = node_type_get_types();
  foreach ($node_types as $type => $name) {
    // We check the edit permissions for anonymous and authenticated users.
    $edit_perm = 'edit any ' . $type . ' content';
    $role_perms[1][$edit_perm] = isset($role_perms[1][$edit_perm])?
                                      intval($role_perms[1][$edit_perm]) : 0;
    $role_perms[2][$edit_perm] = isset($role_perms[2][$edit_perm])?
                                      intval($role_perms[2][$edit_perm]) : 0;
    $grants[0]['grant_update'] = $role_perms[1][$edit_perm];
    $grants[1]['grant_update'] = $role_perms[2][$edit_perm];
    // We check the delete permissions for anonymous and authenticated users.
    $delete_perm = 'delete any ' . $type . ' content';
    $role_perms[1][$delete_perm] = isset($role_perms[1][$delete_perm])?
                                      intval($role_perms[1][$delete_perm]) : 0;
    $role_perms[2][$delete_perm] = isset($role_perms[2][$delete_perm])?
                                      intval($role_perms[2][$delete_perm]) : 0;
    $grants[0]['grant_delete'] = $role_perms[1][$delete_perm];
    $grants[1]['grant_delete'] = $role_perms[2][$delete_perm];
    $config->set('nodeaccess_' . $type, $grants);
    $author_prefs[$type] = array(
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
    );
  }
  $config->set('authors', $author_prefs);

  // Set up all permissions to be editable by default.
  $grant_prefs = array('view' => 1, 'edit' => 1, 'delete' => 1);
  $config->set('allowed_grants', $grant_prefs);

  /**
   * Set up an ID for our roles that way we can use them with our various node_access
   * grants (our nodeaccess ones too!). This becomes the gid for role based access
   * permissions.
   */
  $i = 0;
  $roles_gids = array();
  foreach ($roles as $role_id => $role) {
    $roles_gids[$i] = new stdClass;
    $roles_gids[$i]->name = $role->name;
    $roles_gids[$i]->weight = $role->weight;
    $i++;
  }
  $config->set('role_map', $roles_gids);
  $config->save();
}
